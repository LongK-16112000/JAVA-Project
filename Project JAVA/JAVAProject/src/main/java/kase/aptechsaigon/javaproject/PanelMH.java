/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package kase.aptechsaigon.javaproject;

import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Truc
 */
public class PanelMH extends JPanel {
    private boolean isEditMode = false;
    private int selectedRowBeforeMonHoc = -1;
    /**
     * Creates new form PanelCC
     */
    public PanelMH() {
        initComponents();  
// Thêm ListSelectionListener để tự động điền dữ liệu khi chọn dòng trong JTable
    tableData.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
    @Override
    public void valueChanged(ListSelectionEvent e) {
        // Kiểm tra xem có dòng nào được chọn hay không
        int selectedRow = tableData.getSelectedRow();

        // Nếu có dòng được chọn, điền dữ liệu vào các TextField
        if (selectedRow >= 0) {

            // Lấy giá trị từ các cột trong dòng được chọn
            String maMonHoc = (String) tableData.getValueAt(selectedRow, 0);  // Cột 2 là Số Buổi Học
            String tenMonHoc = (String) tableData.getValueAt(selectedRow, 1);  // Cột 1 là Tên Môn Học
            int soBuoiHoc = (int) tableData.getValueAt(selectedRow, 2);  // Cột 2 là Số Buổi Học
            int soGioHocMoiBuoi = (int) tableData.getValueAt(selectedRow, 3);  // Cột 3 là Số Giờ Học Mỗi Buổi

            // Cập nhật nội dung cho các JTextField
            txtMaMonHoc.setText(maMonHoc);
            txtTenMonHoc.setText(tenMonHoc);  // Hiển thị tên môn học
            txtSoBuoiHoc.setText(String.valueOf(soBuoiHoc));  // Hiển thị số buổi học
            txtSoGioHocMoiBuoi.setText(String.valueOf(soGioHocMoiBuoi));  // Hiển thị số giờ học mỗi buổi
        } else {
            // Nếu không có dòng nào được chọn, làm trống các TextField
            txtMaMonHoc.setText("");
            txtTenMonHoc.setText("");
            txtSoBuoiHoc.setText("");
            txtSoGioHocMoiBuoi.setText("");
        }
    }
});

        
         displayMonHoc(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jp9 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTenMonHoc = new javax.swing.JTextField();
        txtSoGioHocMoiBuoi = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtSoBuoiHoc = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtMaMonHoc = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        setLayout(new java.awt.BorderLayout());

        jp9.setBackground(new java.awt.Color(255, 255, 255,0));
        jp9.setPreferredSize(new java.awt.Dimension(1500, 820));
        jp9.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jp9AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255,0));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255,0));
        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Thông Tin Môn Học");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255,0));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel3.setPreferredSize(new java.awt.Dimension(1460, 567));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255,40));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Số Giờ Học / (tiếng) :");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Tên Môn Học:");

        txtTenMonHoc.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtTenMonHoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenMonHocActionPerformed(evt);
            }
        });

        txtSoGioHocMoiBuoi.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtSoGioHocMoiBuoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSoGioHocMoiBuoiActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Số Buổi Học / (ngày) :");

        txtSoBuoiHoc.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Mã Môn Học");

        txtMaMonHoc.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtMaMonHoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaMonHocActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(0, 51, 153));
        btnCancel.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setText("Hủy");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(0, 51, 153));
        btnSave.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 387, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTenMonHoc, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                            .addComponent(txtSoGioHocMoiBuoi)
                            .addComponent(txtSoBuoiHoc)
                            .addComponent(txtMaMonHoc))))
                .addGap(40, 40, 40))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaMonHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTenMonHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSoBuoiHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSoGioHocMoiBuoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255,40));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        tableData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Môn Học", "Tên  Môn Học", "Số Buổi Học", "Số Giờ Học Mỗi Buổi"
            }
        ));
        jScrollPane1.setViewportView(tableData);
        if (tableData.getColumnModel().getColumnCount() > 0) {
            tableData.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        btnAdd.setBackground(new java.awt.Color(0, 51, 153));
        btnAdd.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 51, 153));
        btnUpdate.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Sửa");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 51, 153));
        btnDelete.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jp9Layout = new javax.swing.GroupLayout(jp9);
        jp9.setLayout(jp9Layout);
        jp9Layout.setHorizontalGroup(
            jp9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jp9Layout.createSequentialGroup()
                .addGap(470, 470, 470)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jp9Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1478, Short.MAX_VALUE)
                .addContainerGap())
        );
        jp9Layout.setVerticalGroup(
            jp9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp9Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        add(jp9, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jp9AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jp9AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jp9AncestorAdded

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
     // Kiểm tra xem người dùng có chọn dòng trong bảng không
int selectedRow = tableData.getSelectedRow();

if (selectedRow >= 0) {
    // Lấy Mã Môn Học từ cột đầu tiên của dòng đã chọn
    String maMonHoc = (String) tableData.getValueAt(selectedRow, 0);

    // Câu lệnh SQL để xóa môn học khỏi cơ sở dữ liệu
    String sqlDelete = "DELETE FROM MonHoc WHERE MaMonHoc = ?";

    // Hiển thị thông báo xác nhận xóa
    int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa môn học này?", 
                                                 "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        try (Connection conn = DatabaseConnection.connect();
             PreparedStatement psDelete = conn.prepareStatement(sqlDelete)) {

            // Đặt mã môn học vào câu lệnh SQL
            psDelete.setString(1, maMonHoc);

            // Thực thi câu lệnh SQL xóa
            int rowsAffected = psDelete.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Môn học đã được xóa thành công!");
                
                // Cập nhật lại bảng sau khi xóa
                displayMonHoc();
            } else {
                JOptionPane.showMessageDialog(null, "Không tìm thấy môn học để xóa.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi xóa môn học.");
        }
    }
} else {
    JOptionPane.showMessageDialog(null, "Vui lòng chọn môn học để xóa.");
}
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

    int selectedRow = tableData.getSelectedRow();  // Kiểm tra xem có dòng nào được chọn trong bảng không
    if (selectedRow >= 0) {
        // Lấy dữ liệu từ dòng đã chọn trong bảng
        String maMonHoc = (String) tableData.getValueAt(selectedRow, 0);  // Mã môn học
        String tenMonHoc = tableData.getValueAt(selectedRow, 1).toString();  // Tên môn học
        String soBuoiHoc = tableData.getValueAt(selectedRow, 2).toString();  // Số buổi học
        String soGioHocMoiBuoi = tableData.getValueAt(selectedRow, 3).toString();  // Số giờ học mỗi buổi

        // Điền dữ liệu vào các TextField
        txtMaMonHoc.setText(maMonHoc);  // Điền mã môn học vào TextField
        txtTenMonHoc.setText(tenMonHoc);  // Điền tên môn học vào TextField
        txtSoBuoiHoc.setText(soBuoiHoc);  // Điền số buổi học vào TextField
        txtSoGioHocMoiBuoi.setText(soGioHocMoiBuoi);  // Điền số giờ học mỗi buổi vào TextField

        // Kích hoạt chế độ chỉnh sửa
        setEditStatus(true);  // Bật chế độ chỉnh sửa

        isEditMode = true;  // Đặt chế độ chỉnh sửa thành true
        
        // Giới hạn nhập vào của txtSoBuoiHoc (từ 5 đến 30)
txtSoBuoiHoc.addKeyListener(new KeyAdapter() {
    @Override
    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();
        
        // Kiểm tra nếu không phải là số
        if (!Character.isDigit(c)) {
            e.consume(); // Nếu không phải là số thì ngừng việc nhập
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        String currentText = txtSoBuoiHoc.getText();
        if (!currentText.isEmpty()) {
            try {
                int value = Integer.parseInt(currentText);
                
                // Giới hạn giá trị từ 5 đến 30
                if (value < 5 || value > 30) {
                    JOptionPane.showMessageDialog(null, "Số buổi học phải từ 5 đến 30!", 
                                                  "Lỗi", JOptionPane.ERROR_MESSAGE);
                    txtSoBuoiHoc.setText("");  // Xóa giá trị khi nhỏ hơn 5 hoặc lớn hơn 30
                }
            } catch (NumberFormatException ex) {
                // Nếu không phải số thì bỏ qua
                txtSoBuoiHoc.setText("");
            }
        }
    }
});

// Giới hạn nhập vào của txtSoGioHocMoiBuoi (từ 2 đến 5)
txtSoGioHocMoiBuoi.addKeyListener(new KeyAdapter() {
    @Override
    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();

        // Kiểm tra nếu không phải là số
        if (!Character.isDigit(c)) {
            e.consume(); // Nếu không phải là số thì ngừng việc nhập
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        String currentText = txtSoGioHocMoiBuoi.getText();
        if (!currentText.isEmpty()) {
            try {
                int value = Integer.parseInt(currentText);

                // Giới hạn giá trị từ 2 đến 5
                if (value < 2 || value > 5) {
                    JOptionPane.showMessageDialog(null, "Số giờ học mỗi buổi phải từ 2 đến 5!", 
                                                  "Lỗi", JOptionPane.ERROR_MESSAGE);
                    txtSoGioHocMoiBuoi.setText("");  // Xóa giá trị khi nhỏ hơn 2 hoặc lớn hơn 5
                }
            } catch (NumberFormatException ex) {
                // Nếu không phải số thì bỏ qua
                txtSoGioHocMoiBuoi.setText("");
            }
        }
    }
});

    } else {
        JOptionPane.showMessageDialog(null, "Vui lòng chọn môn học để sửa!");
    }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
                               
    // Đặt các TextField về trạng thái trống để nhập dữ liệu mới
    txtMaMonHoc.setText("");  // Đặt mã chương trình học trống
    txtTenMonHoc.setText("");
    txtSoBuoiHoc.setText("");  // Đặt tên chương trình học trống
    txtSoGioHocMoiBuoi.setText("");  // Đặt thời gian hoàn thành trống

    // Kích hoạt chế độ chỉnh sửa (setEditStatus true)
    setEditStatus(true);

    // Đặt cờ isEditMode là false, vì đây là chế độ thêm mới
    isEditMode = false;
    tableData.clearSelection();
    
    // Giới hạn nhập vào của txtSoBuoiHoc (từ 5 đến 30)
txtSoBuoiHoc.addKeyListener(new KeyAdapter() {
    @Override
    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();
        
        // Kiểm tra nếu không phải là số
        if (!Character.isDigit(c)) {
            e.consume(); // Nếu không phải là số thì ngừng việc nhập
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        String currentText = txtSoBuoiHoc.getText();
        if (!currentText.isEmpty()) {
            try {
                int value = Integer.parseInt(currentText);
                
                // Giới hạn giá trị từ 5 đến 30
                if (value < 5 || value > 30) {
                    JOptionPane.showMessageDialog(null, "Số buổi học phải từ 5 đến 30!", 
                                                  "Lỗi", JOptionPane.ERROR_MESSAGE);
                    txtSoBuoiHoc.setText("");  // Xóa giá trị khi nhỏ hơn 5 hoặc lớn hơn 30
                }
            } catch (NumberFormatException ex) {
                // Nếu không phải số thì bỏ qua
                txtSoBuoiHoc.setText("");
            }
        }
    }
});

// Giới hạn nhập vào của txtSoGioHocMoiBuoi (từ 2 đến 5)
txtSoGioHocMoiBuoi.addKeyListener(new KeyAdapter() {
    @Override
    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();

        // Kiểm tra nếu không phải là số
        if (!Character.isDigit(c)) {
            e.consume(); // Nếu không phải là số thì ngừng việc nhập
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        String currentText = txtSoGioHocMoiBuoi.getText();
        if (!currentText.isEmpty()) {
            try {
                int value = Integer.parseInt(currentText);

                // Giới hạn giá trị từ 2 đến 5
                if (value < 2 || value > 5) {
                    JOptionPane.showMessageDialog(null, "Số giờ học mỗi buổi phải từ 2 đến 5!", 
                                                  "Lỗi", JOptionPane.ERROR_MESSAGE);
                    txtSoGioHocMoiBuoi.setText("");  // Xóa giá trị khi nhỏ hơn 2 hoặc lớn hơn 5
                }
            } catch (NumberFormatException ex) {
                // Nếu không phải số thì bỏ qua
                txtSoGioHocMoiBuoi.setText("");
            }
        }
    }
});

    }//GEN-LAST:event_btnAddActionPerformed

    private void txtSoGioHocMoiBuoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSoGioHocMoiBuoiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSoGioHocMoiBuoiActionPerformed

    private void txtTenMonHocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenMonHocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenMonHocActionPerformed

    private void txtMaMonHocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaMonHocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaMonHocActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
    // Kiểm tra chế độ sửa (update) hay thêm mới (add)
    if (isEditMode) {
        cancelUpdate();  // Gọi cancelUpdate nếu đang sửa
    } else {
        cancelAdd();  // Gọi cancelAdd nếu đang thêm mới
    }

    }//GEN-LAST:event_btnCancelActionPerformed

    private void cancelAdd() {
    // Trở về trạng thái không chỉnh sửa
    setEditStatus(false);

    // Chọn dòng đầu tiên trong bảng
    if (tableData.getRowCount() > 0) {
        tableData.setRowSelectionInterval(0, 0);  // Chọn dòng đầu tiên
    }

    // Điền lại dữ liệu vào các TextField từ dòng đầu tiên
    String maMonHoc = tableData.getValueAt(0, 0).toString();
    String tenMonHoc = tableData.getValueAt(0, 1).toString();
    String soBuoiHoc = tableData.getValueAt(0, 2).toString();
    String soGioHocMoiBuoi = tableData.getValueAt(0, 3).toString();

    txtMaMonHoc.setText(maMonHoc);
    txtTenMonHoc.setText(tenMonHoc);
    txtSoBuoiHoc.setText(soBuoiHoc);
    txtSoGioHocMoiBuoi.setText(soGioHocMoiBuoi);
}

    private void cancelUpdate() {
    // Trở về trạng thái không chỉnh sửa
    setEditStatus(false);
    
    // Kiểm tra xem có dòng nào đã được chọn không
    int selectedRow = tableData.getSelectedRow();

    // Nếu không có dòng nào được chọn, chọn lại dòng trước đó hoặc dòng đầu tiên
    if (selectedRow == -1 && tableData.getRowCount() > 0) {
        // Nếu không có dòng nào được chọn, chọn lại dòng trước đó (nếu có)
        if (selectedRowBeforeMonHoc >= 0 && selectedRowBeforeMonHoc < tableData.getRowCount()) {
            tableData.setRowSelectionInterval(selectedRowBeforeMonHoc, selectedRowBeforeMonHoc);
            selectedRow = selectedRowBeforeMonHoc; // Cập nhật selectedRow thành dòng trước đó
        } else {
            // Nếu không có dòng trước đó, chọn dòng đầu tiên
            tableData.setRowSelectionInterval(0, 0);
            selectedRow = 0; // Cập nhật selectedRow thành 0
        }
    }

    // Điền lại dữ liệu vào các TextField từ dòng đã chọn (hoặc dòng trước đó)
    if (selectedRow >= 0 && selectedRow < tableData.getRowCount()) {
        String maMonHoc = tableData.getValueAt(selectedRow, 0).toString();
        String tenMonHoc = tableData.getValueAt(selectedRow, 1).toString();
        String soBuoiHoc = tableData.getValueAt(selectedRow, 2).toString();
        String soGioHocMoiBuoi = tableData.getValueAt(selectedRow, 3).toString();

        txtMaMonHoc.setText(maMonHoc);
        txtTenMonHoc.setText(tenMonHoc);
        txtSoBuoiHoc.setText(soBuoiHoc);
        txtSoGioHocMoiBuoi.setText(soGioHocMoiBuoi);
    }
}


    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
                                     
    // Lấy các giá trị từ các TextField
    String maMonHoc = txtMaMonHoc.getText();
    String tenMonHoc = txtTenMonHoc.getText();
    String soBuoiHocText = txtSoBuoiHoc.getText();
    String soGioHocMoiBuoiText = txtSoGioHocMoiBuoi.getText();

    // Kiểm tra nếu các TextField không trống
    if (maMonHoc.isEmpty() ||tenMonHoc.isEmpty() || soBuoiHocText.isEmpty() || soGioHocMoiBuoiText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin!");
        return;
    }

    int soBuoiHoc, soGioHocMoiBuoi;
    try {
        // Chuyển đổi các giá trị đầu vào thành số
        soBuoiHoc = Integer.parseInt(soBuoiHocText);
        soGioHocMoiBuoi = Integer.parseInt(soGioHocMoiBuoiText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Số buổi học và số giờ học mỗi buổi phải là các số hợp lệ!");
        return;
    }

    if (isEditMode) {
        // Nếu chế độ sửa, gọi hàm cập nhật
        updateMonHoc(maMonHoc, tenMonHoc, soBuoiHoc, soGioHocMoiBuoi);
    } else {
        // Nếu chế độ thêm mới, gọi hàm thêm mới
        addMonHoc(maMonHoc,tenMonHoc, soBuoiHoc, soGioHocMoiBuoi);
    }

    // Sau khi lưu (thêm hoặc sửa) thành công, quay lại chế độ xem
    setEditStatus(false);

    }//GEN-LAST:event_btnSaveActionPerformed
     // Hiển thị dữ liệu môn học lên JTable
    private void displayMonHoc() {
        DefaultTableModel model = (DefaultTableModel) tableData.getModel();
        model.setRowCount(0);  // Xóa dữ liệu cũ trong bảng
        String sql = "SELECT * FROM MonHoc";

        try (Connection conn = DatabaseConnection.connect();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                String maMonHoc = rs.getString("MaMonHoc");
                String tenMonHoc = rs.getString("TenMonHoc");
                int soBuoiHoc = rs.getInt("SoBuoiHoc");
                int soGioHocMoiBuoi = rs.getInt("SoGioHocMoiBuoi");

                model.addRow(new Object[]{maMonHoc, tenMonHoc, soBuoiHoc, soGioHocMoiBuoi});
            }
            if(tableData.getRowCount()>0){
                tableData.setRowSelectionInterval(0, 0);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        setEditStatus(false);
    }

    private void addMonHoc(String maMonHoc,String tenMonHoc, int soBuoiHoc, int soGioHocMoiBuoi) {
    // Lấy mã môn học tiếp theo

    // Câu lệnh SQL để thêm môn học vào cơ sở dữ liệu
    String sql = "INSERT INTO MonHoc (MaMonHoc, TenMonHoc, SoBuoiHoc, SoGioHocMoiBuoi) VALUES (?, ?, ?, ?)";

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql)) {
        ps.setString(1, maMonHoc);           // Mã môn học
        ps.setString(2, tenMonHoc);           // Tên môn học
        ps.setInt(3, soBuoiHoc);              // Số buổi học
        ps.setInt(4, soGioHocMoiBuoi);        // Số giờ học mỗi buổi

        int rowsAffected = ps.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Môn học đã được thêm thành công!");
            // Reset lại các trường nhập liệu
            txtTenMonHoc.setText("");
            txtSoBuoiHoc.setText("");
            txtSoGioHocMoiBuoi.setText("");
            displayMonHoc(); // Cập nhật lại bảng sau khi thêm
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi thêm môn học.");
    }
}


    

   private void updateMonHoc(String maMonHoc, String tenMonHoc, int soBuoiHoc, int soGioHocMoiBuoi) {
    String sql = "UPDATE MonHoc SET TenMonHoc = ?, SoBuoiHoc = ?, SoGioHocMoiBuoi = ? WHERE MaMonHoc = ?";

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql)) {
        ps.setString(1, tenMonHoc);            // Tên môn học
        ps.setInt(2, soBuoiHoc);               // Số buổi học
        ps.setInt(3, soGioHocMoiBuoi);         // Số giờ học mỗi buổi
        ps.setString(4, maMonHoc);                // Mã môn học

        int rowsAffected = ps.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Môn học đã được cập nhật thành công!");
            displayMonHoc(); // Cập nhật lại bảng sau khi sửa
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi cập nhật môn học.");
    }
}


    
    public void setEditStatus(boolean editable) {
         isEditMode = editable;
        
        txtMaMonHoc.setEnabled(editable);
        txtSoBuoiHoc.setEnabled(editable);
        txtSoGioHocMoiBuoi.setEnabled(editable);
        txtTenMonHoc.setEnabled(editable);
       
        btnSave.setEnabled(editable);
        btnCancel.setEnabled(editable);
        
        btnAdd.setEnabled(!editable);
        btnUpdate.setEnabled(!editable);
        btnDelete.setEnabled(!editable);

        
        java.awt.Color enableColor = new java.awt.Color(0, 51, 153);
        java.awt.Color disableColor = new java.awt.Color(128, 128, 128);

        if(editable) {
            btnAdd.setBackground(disableColor);
            btnUpdate.setBackground(disableColor);
            btnDelete.setBackground(disableColor);
            
            btnSave.setBackground(enableColor);
            btnCancel.setBackground(enableColor);
        }
        else {
            btnAdd.setBackground(enableColor);
            btnUpdate.setBackground(enableColor);
            btnDelete.setBackground(enableColor);
            
            btnSave.setBackground(disableColor);
            btnCancel.setBackground(disableColor);
        }        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel jp9;
    private javax.swing.JTable tableData;
    private javax.swing.JTextField txtMaMonHoc;
    private javax.swing.JTextField txtSoBuoiHoc;
    private javax.swing.JTextField txtSoGioHocMoiBuoi;
    private javax.swing.JTextField txtTenMonHoc;
    // End of variables declaration//GEN-END:variables
}
