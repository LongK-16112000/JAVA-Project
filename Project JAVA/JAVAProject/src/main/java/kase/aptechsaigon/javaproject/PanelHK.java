/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package kase.aptechsaigon.javaproject;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Truc
 */
public class PanelHK extends javax.swing.JPanel {
 private boolean isEditMode = false;
 private int selectedRowBeforeHocKy = -1;
    private int thoiGianHoanThanh;
    private QLMH qLMH;
    private boolean isComboBoxLoaded = false;
    /**
     * Creates new form PanelHk
     */
    public PanelHK() {
        initComponents();
         setEditStatus(false);
         qLMH = new QLMH();
         
// Thêm ListSelectionListener để tự động điền dữ liệu khi chọn dòng trong JTable cho Học kỳ
// Thêm ListSelectionListener để tự động điền dữ liệu khi chọn dòng trong JTable
    // Sử dụng PopupMenuListener để xử lý sự kiện khi mở ComboBox


tableData.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
    @Override
    public void valueChanged(ListSelectionEvent e) {
        // Kiểm tra xem có dòng nào được chọn hay không
        int selectedRow = tableData.getSelectedRow();

        // Nếu có dòng được chọn, điền dữ liệu vào các TextField
        if (selectedRow >= 0) {

            // Lấy giá trị từ các cột trong dòng được chọn
            String maHocKy = (String) tableData.getValueAt(selectedRow, 0);  
            String tenHocKy = (String) tableData.getValueAt(selectedRow, 1);  // Tên học kỳ
            int soMonHoc = (int) tableData.getValueAt(selectedRow, 2);  // Số môn học
            String tenChungChi = (String) tableData.getValueAt(selectedRow, 3);  // Tên chứng chỉ
            int soThuTuChungChi = (int) tableData.getValueAt(selectedRow, 4);  // Số thứ tự chứng chỉ
            int thoiGianHoanThanh = (int) tableData.getValueAt(selectedRow, 5);  // Thời gian hoàn thành

            // Cập nhật nội dung cho các JTextField
            txtMaChungChi.setText(maHocKy);
            txtTenHocKy.setText(tenHocKy);  // Hiển thị tên học kỳ
            txtSoMonHoc.setText(String.valueOf(soMonHoc));  // Hiển thị số môn học
            txtTenChungChi.setText(tenChungChi);  // Hiển thị tên chứng chỉ
            txtThoiGianHoanThanh.setText(String.valueOf(thoiGianHoanThanh));  // Hiển thị thời gian hoàn thành
            txtSoThuTuChungChi.setText(String.valueOf(soThuTuChungChi));  // Hiển thị số thứ tự chứng chỉ
            
        } else {
            // Nếu không có dòng nào được chọn, làm trống các TextField
            txtMaChungChi.setText("");
            txtTenHocKy.setText("");
            txtSoMonHoc.setText("");
            txtTenChungChi.setText("");
            txtThoiGianHoanThanh.setText("");
            txtSoThuTuChungChi.setText("");
        }
    }
});

        
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jp9 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTenHocKy = new javax.swing.JTextField();
        txtSoMonHoc = new javax.swing.JTextField();
        txtTenChungChi = new javax.swing.JTextField();
        txtThoiGianHoanThanh = new javax.swing.JTextField();
        txtSoThuTuChungChi = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtMaChungChi = new javax.swing.JTextField();
        txtMaChuongtrinh = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        ComboBoxcth = new javax.swing.JComboBox<>();
        btnmh_hk = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        setLayout(new java.awt.BorderLayout());

        jp9.setBackground(new java.awt.Color(255, 255, 255,0));
        jp9.setPreferredSize(new java.awt.Dimension(1500, 820));
        jp9.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jp9AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255,0));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255,0));
        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Thông Tin Học Kỳ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255,0));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel3.setMaximumSize(new java.awt.Dimension(0, 0));
        jPanel3.setPreferredSize(new java.awt.Dimension(1460, 400));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255,40));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        tableData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Học kì", "Tên Học Kỳ", "Số Môn Học", "Tên Chứng Chỉ", "STT Chứng Chỉ", "Thời Gian Hoàn Thành"
            }
        ));
        tableData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(tableData);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255,40));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Số Môn Học :");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Tên Học Kỳ :");

        txtTenHocKy.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtTenHocKy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenHocKyActionPerformed(evt);
            }
        });

        txtSoMonHoc.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtSoMonHoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSoMonHocActionPerformed(evt);
            }
        });

        txtTenChungChi.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtTenChungChi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenChungChiActionPerformed(evt);
            }
        });

        txtThoiGianHoanThanh.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N

        txtSoThuTuChungChi.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tên Chứng chỉ :");

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Thời Gian /(tháng) :");

        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("STT Chứng Chỉ :");

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mã Học Kỳ :");

        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Mã Chương Trình :");

        txtMaChungChi.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N

        txtMaChuongtrinh.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N

        btnCancel.setBackground(new java.awt.Color(0, 51, 153));
        btnCancel.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setText("Hủy");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(0, 51, 153));
        btnSave.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtMaChuongtrinh, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtSoThuTuChungChi)
                                    .addComponent(txtSoMonHoc)
                                    .addComponent(txtTenChungChi)
                                    .addComponent(txtMaChungChi, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtTenHocKy, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(btnSave)
                                    .addGap(31, 31, 31)
                                    .addComponent(btnCancel))
                                .addComponent(txtThoiGianHoanThanh, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaChungChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMaChuongtrinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTenHocKy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoMonHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenChungChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoThuTuChungChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtThoiGianHoanThanh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        btnAdd.setBackground(new java.awt.Color(0, 51, 153));
        btnAdd.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 51, 153));
        btnUpdate.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Sửa");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 51, 153));
        btnDelete.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        ComboBoxcth.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        ComboBoxcth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn Chương Trình" }));
        ComboBoxcth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxcthActionPerformed(evt);
            }
        });

        btnmh_hk.setBackground(new java.awt.Color(0, 51, 153));
        btnmh_hk.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnmh_hk.setForeground(new java.awt.Color(255, 255, 255));
        btnmh_hk.setText("Quản lý môn học");
        btnmh_hk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmh_hkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(ComboBoxcth, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnmh_hk)
                        .addGap(48, 48, 48))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ComboBoxcth, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnmh_hk, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jp9Layout = new javax.swing.GroupLayout(jp9);
        jp9.setLayout(jp9Layout);
        jp9Layout.setHorizontalGroup(
            jp9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jp9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1513, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(437, 437, 437))
        );
        jp9Layout.setVerticalGroup(
            jp9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp9Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        add(jp9, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void txtTenHocKyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenHocKyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenHocKyActionPerformed

    private void txtSoMonHocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSoMonHocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSoMonHocActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // Nếu không có dòng nào được chọn, làm trống các TextField
            txtMaChungChi.setText("");
            txtTenHocKy.setText("");
            txtSoMonHoc.setText("");
            txtTenChungChi.setText("");
            txtThoiGianHoanThanh.setText("");
            txtSoThuTuChungChi.setText("");
                        // Kích hoạt chế độ chỉnh sửa (setEditStatus true)
            setEditStatus(true);

            // Đặt cờ isEditMode là false, vì đây là chế độ thêm mới
            isEditMode = false;
            tableData.clearSelection();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
 setEditStatus(true);

        // Kiểm tra xem người dùng có chọn dòng nào trong bảng không
int selectedRow = tableData.getSelectedRow();

if (selectedRow >= 0) {
    // Lấy dữ liệu từ dòng đã chọn trong bảng
    String maHocKy = (String) tableData.getValueAt(selectedRow, 0);  // Mã học kỳ
    String maChuongTrinhHoc = (String) tableData.getValueAt(selectedRow, 1); 
    String tenHocKy = tableData.getValueAt(selectedRow, 2).toString();  // Tên học kỳ
    String soMonHoc = tableData.getValueAt(selectedRow, 3).toString();  // Số môn học
    String tenChungChi = tableData.getValueAt(selectedRow, 4).toString();  // Tên chứng chỉ
    String thoiGianHoanThanh = tableData.getValueAt(selectedRow, 6).toString();  // Thời gian hoàn thành
    String soThuTuChungChi = tableData.getValueAt(selectedRow, 5).toString();  // Số thứ tự chứng chỉ

    // Điền dữ liệu vào các TextField
    txtTenHocKy.setText(tenHocKy);
    txtSoMonHoc.setText(soMonHoc);
    txtTenChungChi.setText(tenChungChi);
    txtThoiGianHoanThanh.setText(thoiGianHoanThanh);
    txtSoThuTuChungChi.setText(soThuTuChungChi);

    // Đảm bảo txtMaChuongtrinh lấy giá trị từ ComboBoxcth, không phải từ bảng
    String selectedChuongTrinh = (String) ComboBoxcth.getSelectedItem();
    txtMaChuongtrinh.setText(selectedChuongTrinh);

    // Đặt cờ isEditMode là true, vì đây là chế độ sửa
    isEditMode = true;
} else {
    JOptionPane.showMessageDialog(null, "Vui lòng chọn học kỳ để sửa!");
}

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
// Kiểm tra xem người dùng có chọn dòng nào trong bảng không
int selectedRow = tableData.getSelectedRow();

if (selectedRow >= 0) {
    // Lấy mã học kỳ và mã chương trình học từ dòng được chọn
    String maHocKy = (String) tableData.getValueAt(selectedRow, 0);  // Mã học kỳ
    // In ra giá trị để kiểm tra
    System.out.println("Mã học kỳ cần xóa: " + maHocKy);

    // Xác nhận việc xóa
    int confirm = JOptionPane.showConfirmDialog(null, 
            "Bạn có chắc chắn muốn xóa học kỳ này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        // Câu lệnh SQL để xóa học kỳ theo MaHocKy
        String sql = "DELETE FROM HocKy WHERE MaHocKy = ?";

        try (Connection conn = DatabaseConnection.connect();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, maHocKy);  // Gán MaHocKy cho câu lệnh SQL

            // Thực thi câu lệnh DELETE
            int rowsAffected = ps.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Học kỳ đã được xóa thành công!");

                // Cập nhật lại bảng sau khi xóa
                DefaultTableModel model = (DefaultTableModel) tableData.getModel();
                model.removeRow(selectedRow);  // Xóa dòng tương ứng với học kỳ đã xóa

                // Nếu còn dòng trong bảng, chọn lại dòng đầu tiên
                if (model.getRowCount() > 0) {
                    tableData.setRowSelectionInterval(0, 0);  // Chọn dòng đầu tiên
                }
            } else {
                JOptionPane.showMessageDialog(null, "Không thể xóa học kỳ này.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi xóa học kỳ.");
        }
    }
} else {
    JOptionPane.showMessageDialog(null, "Vui lòng chọn học kỳ để xóa.");
}


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void jp9AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jp9AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jp9AncestorAdded

    private void txtTenChungChiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenChungChiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenChungChiActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // Kiểm tra chế độ sửa (update) hay thêm mới (add)
    if (isEditMode) {
        cancelUpdate();  // Gọi cancelUpdate nếu đang sửa
    } else {
        cancelAdd();  // Gọi cancelAdd nếu đang thêm mới
    }
    }//GEN-LAST:event_btnCancelActionPerformed

    
    private void cancelAdd() {
    // Trở về trạng thái không chỉnh sửa
    setEditStatus(false);

     // Nếu bảng có ít nhất một dòng, chọn dòng đầu tiên
        if (tableData.getRowCount() > 0) {
            // Chọn dòng đầu tiên (dòng 0) trong bảng
            tableData.setRowSelectionInterval(0, 0);  

            // Lấy dữ liệu từ dòng đầu tiên trong bảng và cập nhật các TextField
            String maChungChi = tableData.getValueAt(0, 0).toString();
            String tenHocKy = tableData.getValueAt(0, 1).toString();
            String soMonHoc = tableData.getValueAt(0, 2).toString();
            String tenChungChi = tableData.getValueAt(0, 3).toString();
            String soThuTuChungChi = tableData.getValueAt(0, 4).toString();
            String thoiGianHoanThanh = tableData.getValueAt(0, 5).toString();

            // Điền dữ liệu vào các TextField
            txtMaChungChi.setText(maChungChi);
            txtTenHocKy.setText(tenHocKy);
            txtSoMonHoc.setText(soMonHoc);
            txtTenChungChi.setText(tenChungChi);
            txtSoThuTuChungChi.setText(soThuTuChungChi);
            txtThoiGianHoanThanh.setText(thoiGianHoanThanh);
        }
}

    private void cancelUpdate() {
    // Trở về trạng thái không chỉnh sửa
    setEditStatus(false);

    // Kiểm tra xem có dòng nào đã được chọn không
    int selectedRow = tableData.getSelectedRow();

    // Nếu không có dòng nào được chọn, chọn lại dòng trước đó hoặc dòng đầu tiên
    if (selectedRow == -1 && tableData.getRowCount() > 0) {
        // Nếu không có dòng nào được chọn, chọn lại dòng trước đó (nếu có)
        if (selectedRowBeforeHocKy >= 0 && selectedRowBeforeHocKy < tableData.getRowCount()) {
            tableData.setRowSelectionInterval(selectedRowBeforeHocKy, selectedRowBeforeHocKy);
            selectedRow = selectedRowBeforeHocKy; // Cập nhật selectedRow thành dòng trước đó
        } else {
            // Nếu không có dòng trước đó, chọn dòng đầu tiên
            tableData.setRowSelectionInterval(0, 0);
            selectedRow = 0; // Cập nhật selectedRow thành 0
        }
    }

    // Điền lại dữ liệu vào các TextField từ dòng đã chọn (hoặc dòng trước đó)
    if (selectedRow >= 0 && selectedRow < tableData.getRowCount()) {
       // Lấy dữ liệu từ dòng đầu tiên trong bảng và cập nhật các TextField
            String maChungChi = tableData.getValueAt(0, 0).toString();
            String tenHocKy = tableData.getValueAt(0, 1).toString();
            String soMonHoc = tableData.getValueAt(0, 2).toString();
            String tenChungChi = tableData.getValueAt(0, 3).toString();
            String soThuTuChungChi = tableData.getValueAt(0, 4).toString();
            String thoiGianHoanThanh = tableData.getValueAt(0, 5).toString();

            // Điền dữ liệu vào các TextField
            txtMaChungChi.setText(maChungChi);
            txtTenHocKy.setText(tenHocKy);
            txtSoMonHoc.setText(soMonHoc);
            txtTenChungChi.setText(tenChungChi);
            txtSoThuTuChungChi.setText(soThuTuChungChi);
            txtThoiGianHoanThanh.setText(thoiGianHoanThanh);
    }
}

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
 
// Lấy dữ liệu từ các TextField
String maHocKy = txtMaChungChi.getText();
String tenHocKy = txtTenHocKy.getText();
String soMonHocText = txtSoMonHoc.getText();
String tenChungChi = txtTenChungChi.getText();
String soThuTuChungChiText = txtSoThuTuChungChi.getText();
String thoiGianHoanThanhText = txtThoiGianHoanThanh.getText();

// Kiểm tra nếu các TextField không trống
if (maHocKy.isEmpty() || tenHocKy.isEmpty() || soMonHocText.isEmpty() || tenChungChi.isEmpty() || soThuTuChungChiText.isEmpty() || thoiGianHoanThanhText.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin!");
    return;
}

// Kiểm tra kiểu dữ liệu của các trường cần là số nguyên
int soMonHoc, thoiGianHoanThanh, soThuTuChungChi;
try {
    // Kiểm tra và chuyển đổi dữ liệu nhập vào
    soMonHoc = Integer.parseInt(soMonHocText);
    soThuTuChungChi = Integer.parseInt(soThuTuChungChiText);
    thoiGianHoanThanh = Integer.parseInt(thoiGianHoanThanhText);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Các trường nhập phải là các số hợp lệ!");
    return;
}


// Kiểm tra xem là chế độ sửa hay thêm mới
if (isEditMode) {
    // Nếu là chế độ sửa, gọi hàm cập nhật
    updateHocKy(maHocKy, tenHocKy, soMonHoc, tenChungChi, soThuTuChungChi, thoiGianHoanThanh);
} else {
    // Nếu là chế độ thêm mới, gọi hàm thêm mới
    addHocKy(maHocKy,tenHocKy, soMonHoc, tenChungChi, soThuTuChungChi, thoiGianHoanThanh);
}
setEditStatus(false);  



    }//GEN-LAST:event_btnSaveActionPerformed


    private void btnmh_hkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmh_hkActionPerformed
//     qLMH.setVisible(true);
//        this.add(qLMH);
//        this.revalidate();  // Cập nhật lại giao diện
//            this.repaint();  // Vẽ lại giao diện
//    
    }//GEN-LAST:event_btnmh_hkActionPerformed

    private void ComboBoxcthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxcthActionPerformed
        // Hiển thị ComboBox khi người dùng tương tác
        ComboBoxcth.showPopup();

        // Tải dữ liệu chỉ khi ComboBox chưa được load
        if (!isComboBoxLoaded) {
             // Xóa tất cả các item trong ComboBox trước khi thêm mới
//            ComboBoxcth.removeAllItems();

            // Thêm item mặc định "Chọn Chương Trình"
//            ComboBoxcth.addItem("Chọn Chương Trình");

            // Tải dữ liệu chương trình học từ cơ sở dữ liệu và thêm vào ComboBox
            loadComboBoxData();

            // Đánh dấu là ComboBox đã được load
            isComboBoxLoaded = true;
            }

        // Lấy chương trình học đã chọn từ ComboBox
        String selectedChuongTrinh = (String) ComboBoxcth.getSelectedItem();

        // Kiểm tra nếu người dùng có chọn chương trình học và không chọn mục "Chọn Chương Trình"
        if (selectedChuongTrinh != null && !selectedChuongTrinh.equals("Chọn Chương Trình")) {
            // Lấy mã chương trình học từ tên chương trình học
            String maChuongTrinhHoc = getMaChuongTrinhHocByTenChuongTrinh(selectedChuongTrinh);

            // Kiểm tra nếu mã chương trình học hợp lệ
            if (maChuongTrinhHoc != null) {
                // Hiển thị học kỳ tương ứng với mã chương trình học
                displayHocKy(maChuongTrinhHoc);

                // Hiển thị tên chương trình học vào TextField
                String tenChuongTrinh = getTenChuongTrinhHoc(maChuongTrinhHoc);
                txtMaChuongtrinh.setText(tenChuongTrinh);
            } else {
                System.out.println("Không tìm thấy chương trình học với tên: " + selectedChuongTrinh);
            }
        } else {
            System.out.println("Vui lòng chọn chương trình học.");
        }
    }//GEN-LAST:event_ComboBoxcthActionPerformed
    private String getTenChuongTrinhHoc(String maChuongTrinhHoc) {
    String tenChuongTrinh = null;  // Mặc định là null nếu không tìm thấy tên chương trình học
    String sql = "SELECT TenChuongTrinh FROM ChuongTrinhHoc WHERE MaChuongTrinhHoc = ?";

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        ps.setString(1, maChuongTrinhHoc);  // Gán mã chương trình học vào câu truy vấn
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            tenChuongTrinh = rs.getString("TenChuongTrinh");  // Lấy tên chương trình học
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }

    return tenChuongTrinh;  // Trả về tên chương trình học
}


    
// Lấy dữ liệu và hiển thị ComboBox với danh sách các chương trình học
private void loadComboBoxData() {
    
    // Giả sử bạn có phương thức này để lấy danh sách các chương trình học từ cơ sở dữ liệu
    List<String> chuongTrinhHocList = getChuongTrinhHocList();
    // Thêm các chương trình học vào ComboBox
    for (String chuongTrinhHoc : chuongTrinhHocList) {
        ComboBoxcth.addItem(chuongTrinhHoc);
    }
     
}


private List<String> getChuongTrinhHocList() {
    List<String> chuongTrinhHocList = new ArrayList<>();
    String sql = "SELECT TenChuongTrinh FROM ChuongTrinhHoc";  // Lấy tên các chương trình học

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql);
         ResultSet rs = ps.executeQuery()) {

        while (rs.next()) {
            chuongTrinhHocList.add(rs.getString("TenChuongTrinh"));
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }

    return chuongTrinhHocList;
}

    private void displayHocKy(String maChuongTrinhHoc) {
    DefaultTableModel model = (DefaultTableModel) tableData.getModel();
    model.setRowCount(0);  // Xóa dữ liệu cũ trong bảng

    // SQL query để lấy dữ liệu học kỳ dựa trên MaChuongTrinhHoc
    String sql = "SELECT * FROM HocKy WHERE MaChuongTrinhHoc = ?";

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        ps.setString(1, maChuongTrinhHoc);  // Set giá trị maChuongTrinhHoc vào câu truy vấn
        ResultSet rs = ps.executeQuery();

        // Lặp qua từng dòng dữ liệu trong ResultSet và thêm vào bảng
        while (rs.next()) {
            String maHocKy = rs.getString("MaHocKy");
            String tenHocKy = rs.getString("TenHocKy");
            int soMonHoc = rs.getInt("SoMonHoc");
            String tenChungChi = rs.getString("TenChungChi");
            int soThuTuChungChi = rs.getInt("SoThuTuChungChi");
            int thoiGianHoanThanh = rs.getInt("ThoiGianHoanThanh");

            // Thêm dữ liệu vào bảng
            model.addRow(new Object[]{maHocKy, tenHocKy, soMonHoc, tenChungChi, soThuTuChungChi, thoiGianHoanThanh});
        }

        // Nếu có dữ liệu, tự động chọn dòng đầu tiên
        if (tableData.getRowCount() > 0) {
            tableData.setRowSelectionInterval(0, 0);
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
     
        setEditStatus(false);
}


private String getMaChuongTrinhHocByTenChuongTrinh(String tenChuongTrinh) {
    String maChuongTrinhHoc = null;  // Sử dụng String thay vì int
    String sql = "SELECT MaChuongTrinhHoc FROM ChuongTrinhHoc WHERE TenChuongTrinh = ?";

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        ps.setString(1, tenChuongTrinh);  // Gán tên chương trình học vào câu truy vấn
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            maChuongTrinhHoc = rs.getString("MaChuongTrinhHoc");  // Lấy mã chương trình học dưới dạng String
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }

    return maChuongTrinhHoc;  // Trả về mã chương trình học dưới dạng String
}

private void updateHocKy(String maHocKy, String tenHocKy, int soMonHoc, String tenChungChi, int soThuTuChungChi, int thoiGianHoanThanh) {
    // Câu lệnh SQL để cập nhật học kỳ trong cơ sở dữ liệu
    String sql = "UPDATE HocKy SET TenHocKy = ?, SoMonHoc = ?, TenChungChi = ?, SoThuTuChungChi = ?, ThoiGianHoanThanh = ? " +
                 "WHERE MaHocKy = ?";

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        // Gán giá trị cho các tham số trong câu lệnh SQL
        ps.setString(1, tenHocKy);  // Tên học kỳ
        ps.setInt(2, soMonHoc);  // Số môn học
        ps.setString(3, tenChungChi);  // Tên chứng chỉ
        ps.setInt(4, soThuTuChungChi);  // Số thứ tự chứng chỉ
        ps.setInt(5, thoiGianHoanThanh);  // Thời gian hoàn thành
        ps.setString(6, maHocKy);  // Mã học kỳ (dùng để xác định bản ghi cần cập nhật)

        // Thực thi câu lệnh UPDATE
        int rowsAffected = ps.executeUpdate();

        if (rowsAffected > 0) {
            // Thông báo cho người dùng và cập nhật lại bảng
            JOptionPane.showMessageDialog(null, "Học kỳ đã được cập nhật thành công!");

            // Cập nhật trực tiếp dòng đã sửa trong bảng
            DefaultTableModel model = (DefaultTableModel) tableData.getModel();
            int selectedRow = tableData.getSelectedRow();  // Lấy dòng đã chọn

            if (selectedRow >= 0) {
                // Cập nhật các giá trị cho dòng đã chọn
                model.setValueAt(tenHocKy, selectedRow, 1);  // Cập nhật tên học kỳ
                model.setValueAt(soMonHoc, selectedRow, 2);  // Cập nhật số môn học
                model.setValueAt(tenChungChi, selectedRow, 3);  // Cập nhật tên chứng chỉ
                model.setValueAt(soThuTuChungChi, selectedRow, 4);  // Cập nhật số thứ tự chứng chỉ
                model.setValueAt(thoiGianHoanThanh, selectedRow, 5);  // Cập nhật thời gian hoàn thành

                // Làm mới lại bảng để hiển thị các thay đổi
                model.fireTableDataChanged(); // Cập nhật bảng dữ liệu
            }
        } else {
            JOptionPane.showMessageDialog(null, "Không thể cập nhật học kỳ này.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi cập nhật học kỳ.");
    }
}





// Phương thức thêm học kỳ vào cơ sở dữ liệu
private void addHocKy(String maHocKy, String tenHocKy, int soMonHoc, String tenChungChi, int soThuTuChungChi, int thoiGianHoanThanh) {
    

    // Câu lệnh SQL để thêm học kỳ mới vào cơ sở dữ liệu
    String sql = "INSERT INTO HocKy (MaHocKy, TenHocKy, SoMonHoc, TenChungChi, SoThuTuChungChi, ThoiGianHoanThanh) " +
                 "VALUES (?, ?, ?, ?, ?, ?)";

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        // Gán giá trị cho các tham số trong câu lệnh SQL
        ps.setString(1, maHocKy);  // Mã học kỳ
        ps.setString(2, tenHocKy);  // Tên học kỳ
        ps.setInt(3, soMonHoc);  // Số môn học
        ps.setString(4, tenChungChi);  // Tên chứng chỉ
        ps.setInt(5, soThuTuChungChi);  // Số thứ tự chứng chỉ
        ps.setInt(6, thoiGianHoanThanh);  // Thời gian hoàn thành

        // Thực thi câu lệnh INSERT
        int rowsAffected = ps.executeUpdate();

        if (rowsAffected > 0) {
            // Thông báo cho người dùng khi thêm thành công
            JOptionPane.showMessageDialog(null, "Học kỳ đã được thêm thành công!");

            // Cập nhật lại bảng sau khi thêm
            DefaultTableModel model = (DefaultTableModel) tableData.getModel();
            // Thêm một dòng mới vào bảng với các giá trị đã nhập
            model.addRow(new Object[]{
                maHocKy, 
                tenHocKy, 
                soMonHoc, 
                tenChungChi, 
                soThuTuChungChi, 
                thoiGianHoanThanh
            });
        } else {
            JOptionPane.showMessageDialog(null, "Không thể thêm học kỳ này.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi thêm học kỳ: " + e.getMessage());
    }
}





public void setEditStatus(boolean editable) {
         isEditMode = editable;
        
        txtMaChungChi.setEnabled(editable);
        txtMaChuongtrinh.setEditable(false);
        txtSoMonHoc.setEnabled(editable);
        txtSoThuTuChungChi.setEnabled(editable);
        txtTenChungChi.setEnabled(editable);
        txtTenHocKy.setEnabled(editable);
        txtThoiGianHoanThanh.setEnabled(editable);
       
        btnSave.setEnabled(editable);
        btnCancel.setEnabled(editable);
        
        btnAdd.setEnabled(!editable);
        btnUpdate.setEnabled(!editable);
        btnDelete.setEnabled(!editable);
        ComboBoxcth.setEditable(!editable);
        
        java.awt.Color enableColor = new java.awt.Color(0, 51, 153);
        java.awt.Color disableColor = new java.awt.Color(128, 128, 128);

        if(editable) {
            btnAdd.setBackground(disableColor);
            btnUpdate.setBackground(disableColor);
            btnDelete.setBackground(disableColor);
            
            
            btnSave.setBackground(enableColor);
            btnCancel.setBackground(enableColor);
        }
        else {
            btnAdd.setBackground(enableColor);
            btnUpdate.setBackground(enableColor);
            btnDelete.setBackground(enableColor);
            
            btnSave.setBackground(disableColor);
            btnCancel.setBackground(disableColor);
        }        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxcth;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnmh_hk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel jp9;
    private javax.swing.JTable tableData;
    private javax.swing.JTextField txtMaChungChi;
    private javax.swing.JTextField txtMaChuongtrinh;
    private javax.swing.JTextField txtSoMonHoc;
    private javax.swing.JTextField txtSoThuTuChungChi;
    private javax.swing.JTextField txtTenChungChi;
    private javax.swing.JTextField txtTenHocKy;
    private javax.swing.JTextField txtThoiGianHoanThanh;
    // End of variables declaration//GEN-END:variables

    private void clearHocKyFields() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
