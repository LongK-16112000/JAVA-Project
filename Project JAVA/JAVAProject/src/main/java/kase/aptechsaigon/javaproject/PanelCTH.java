/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package kase.aptechsaigon.javaproject;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Truc
 */
public class PanelCTH extends JPanel {
    private boolean isEditMode = false;
    int selectedRowBefore = -1;
    /**
     * Creates new form PanelCTH
     */
    public PanelCTH() {
        initComponents();
//      btnAdd.addActionListener(e -> addChuongTrinhHoc());
//        btnUpdate.addActionListener(e -> updateChuongTrinhHoc());
//        btnDelete.addActionListener(e -> deleteChuongTrinhHoc());
        // Thêm ListSelectionListener để tự động điền dữ liệu khi chọn dòng trong JTable
        tableData.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                // Kiểm tra xem có dòng nào được chọn hay không
                int selectedRow = tableData.getSelectedRow();

                // Nếu có dòng được chọn, điền dữ liệu vào các TextField
                if (selectedRow >= 0) {
                    String maChuongTrinh = (String) tableData.getValueAt(selectedRow, 0); 
                    String tenChuongTrinh = (String) tableData.getValueAt(selectedRow, 1);  // Cột 1 là Tên Chương Trình
                    int thoiGianHoanThanh = (int) tableData.getValueAt(selectedRow, 2);  // Cột 2 là Thời Gian Hoàn Thành

                    // Cập nhật nội dung cho các JTextField
                     // Hiển thị mã chương trình học
                    txtMaChuongTrinh.setText(maChuongTrinh);
                    txtTenChuongTrinh.setText(tenChuongTrinh);  // Hiển thị tên chương trình học
                    txtThoiGianHoanThanh.setText(String.valueOf(thoiGianHoanThanh));  // Hiển thị thời gian hoàn thành
                } else {
                    // Nếu không có dòng nào được chọn, làm trống các TextField
                    txtMaChuongTrinh.setText("");
                    txtTenChuongTrinh.setText("");
                    txtThoiGianHoanThanh.setText("");
                }
            }
        });
        
        
     
        displayChuongTrinhHoc();  
      
    }
   



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jp9 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTenChuongTrinh = new javax.swing.JTextField();
        txtThoiGianHoanThanh = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtMaChuongTrinh = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(255, 255, 255,0
        ));
        setOpaque(false);
        setRequestFocusEnabled(false);
        setLayout(new java.awt.BorderLayout());

        jp9.setBackground(new java.awt.Color(255, 255, 255,0));
        jp9.setPreferredSize(new java.awt.Dimension(1500, 820));
        jp9.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jp9AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255,0));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255,0));
        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Thông tin Chương Trình Học");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255,0));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255,40));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        tableData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã", "Tên Chương Trình", "Thời Gian Chương Trình"
            }
        ));
        jScrollPane1.setViewportView(tableData);
        if (tableData.getColumnModel().getColumnCount() > 0) {
            tableData.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255,40));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Thời Gian / (tháng) :");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Tên Chương Trình :");

        txtTenChuongTrinh.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtTenChuongTrinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenChuongTrinhActionPerformed(evt);
            }
        });

        txtThoiGianHoanThanh.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtThoiGianHoanThanh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtThoiGianHoanThanhActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mã Chương Trình");

        txtMaChuongTrinh.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N

        btnCancel.setBackground(new java.awt.Color(0, 51, 153));
        btnCancel.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setText("Hủy");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(0, 51, 153));
        btnSave.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtThoiGianHoanThanh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtTenChuongTrinh, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(txtMaChuongTrinh, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaChuongTrinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenChuongTrinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtThoiGianHoanThanh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(121, 121, 121))
        );

        btnAdd.setBackground(new java.awt.Color(0, 51, 153));
        btnAdd.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 51, 153));
        btnUpdate.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Sửa");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 51, 153));
        btnDelete.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jp9Layout = new javax.swing.GroupLayout(jp9);
        jp9.setLayout(jp9Layout);
        jp9Layout.setHorizontalGroup(
            jp9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jp9Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(16, 16, 16))
            .addGroup(jp9Layout.createSequentialGroup()
                .addGap(500, 500, 500)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jp9Layout.setVerticalGroup(
            jp9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp9Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(227, Short.MAX_VALUE))
        );

        add(jp9, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
    // Đặt các TextField về trạng thái trống để nhập dữ liệu mới
    txtMaChuongTrinh.setText("");  // Đặt mã chương trình học trống
    txtTenChuongTrinh.setText("");  // Đặt tên chương trình học trống
    txtThoiGianHoanThanh.setText("");  // Đặt thời gian hoàn thành trống

    // Kích hoạt chế độ chỉnh sửa (setEditStatus true)
    setEditStatus(true);

    // Đặt cờ isEditMode là false, vì đây là chế độ thêm mới
    isEditMode = false;
    tableData.clearSelection();

    // Giới hạn nhập vào của txtThoiGianHoanThanh (từ 1 đến 60)
    txtThoiGianHoanThanh.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();

            // Kiểm tra nếu không phải là số
            if (!Character.isDigit(c)) {
                e.consume(); // Nếu không phải là số thì ngừng việc nhập
            }
        }

        @Override
        public void keyReleased(KeyEvent e) {
            // Sau khi nhả phím, kiểm tra giá trị
            String currentText = txtThoiGianHoanThanh.getText();
            if (!currentText.isEmpty()) {
                try {
                    int value = Integer.parseInt(currentText);

                    // Giới hạn giá trị từ 1 đến 60
                    if (value < 1) {
                        // Hiển thị thông báo lỗi khi giá trị nhỏ hơn 1
                        JOptionPane.showMessageDialog(null, "Thời gian hoàn thành phải từ 1 đến 60!", 
                                                      "Lỗi", JOptionPane.ERROR_MESSAGE);
                        txtThoiGianHoanThanh.setText("");  // Xóa giá trị khi nhỏ hơn 1
                    } else if (value > 60) {
                        // Hiển thị thông báo lỗi khi giá trị lớn hơn 60
                        JOptionPane.showMessageDialog(null, "Thời gian hoàn thành phải từ 1 đến 60!", 
                                                      "Lỗi", JOptionPane.ERROR_MESSAGE);
                        txtThoiGianHoanThanh.setText("");  // Xóa giá trị khi vượt quá 60
                    }
                } catch (NumberFormatException ex) {
                    // Nếu không phải số thì bỏ qua
                    txtThoiGianHoanThanh.setText("");
                }
            }
        }
    });

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
    int selectedRow = tableData.getSelectedRow();  // Kiểm tra xem có dòng nào được chọn trong bảng không
    if (selectedRow >= 0) {
        // Lấy dữ liệu từ dòng đã chọn trong bảng
        String maChuongTrinhHoc = tableData.getValueAt(selectedRow, 0).toString();  // Mã chương trình học
        String tenChuongTrinh = tableData.getValueAt(selectedRow, 1).toString();     // Tên chương trình học
        String thoiGianHoanThanh = tableData.getValueAt(selectedRow, 2).toString();  // Thời gian hoàn thành

        // Điền dữ liệu vào các TextField
        txtMaChuongTrinh.setText(maChuongTrinhHoc);  // Điền mã chương trình học vào TextField
        txtTenChuongTrinh.setText(tenChuongTrinh);   // Điền tên chương trình học vào TextField
        txtThoiGianHoanThanh.setText(thoiGianHoanThanh);  // Điền thời gian hoàn thành vào TextField

        // Kích hoạt chế độ chỉnh sửa
        setEditStatus(true);
        isEditMode = true;

        // Giới hạn nhập vào của txtThoiGianHoanThanh (từ 1 đến 60)
        txtThoiGianHoanThanh.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();

                // Kiểm tra nếu không phải là số
                if (!Character.isDigit(c)) {
                    e.consume(); // Nếu không phải là số thì ngừng việc nhập
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // Sau khi nhả phím, kiểm tra giá trị
                String currentText = txtThoiGianHoanThanh.getText();

                if (!currentText.isEmpty()) {
                    try {
                        int value = Integer.parseInt(currentText);

                        // Kiểm tra giá trị và hiển thị thông báo lỗi nếu không hợp lệ
                        if (value < 1 || value > 60) {
                            // Hiển thị thông báo lỗi khi giá trị không nằm trong khoảng 1 đến 60
                            JOptionPane.showMessageDialog(null, "Thời gian hoàn thành phải từ 1 đến 60!", 
                                                          "Lỗi", JOptionPane.ERROR_MESSAGE);
                            txtThoiGianHoanThanh.setText("");  // Xóa giá trị khi nhỏ hơn 1 hoặc lớn hơn 60
                        }
                    } catch (NumberFormatException ex) {
                        // Nếu không phải là số thì bỏ qua và xóa giá trị
                        txtThoiGianHoanThanh.setText("");
                    }
                }
            }
        });

    } else {
        JOptionPane.showMessageDialog(null, "Vui lòng chọn chương trình học để sửa!");
    }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

    // Kiểm tra xem người dùng có chọn dòng trong bảng không
    int selectedRow = tableData.getSelectedRow();
    
    if (selectedRow >= 0) {
        // Lấy Mã Chương Trình Học từ cột đầu tiên của dòng đã chọn
        String maChuongTrinhHoc = (String) tableData.getValueAt(selectedRow, 0);

        // Câu lệnh SQL để xóa chương trình học khỏi cơ sở dữ liệu
        String sqlDelete = "DELETE FROM ChuongTrinhHoc WHERE MaChuongTrinhHoc = ?";

        // Hiển thị thông báo xác nhận xóa
        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa chương trình học này?", 
                                                     "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DatabaseConnection.connect();
                 PreparedStatement psDelete = conn.prepareStatement(sqlDelete)) {

                // Đặt mã chương trình học vào câu lệnh SQL
                psDelete.setString(1, maChuongTrinhHoc);

                // Thực thi câu lệnh SQL xóa
                int rowsAffected = psDelete.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Chương trình học đã được xóa thành công!");
                    
                    // Cập nhật lại bảng sau khi xóa
                    displayChuongTrinhHoc();
                } else {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy chương trình học để xóa.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi xóa chương trình học.");
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Vui lòng chọn chương trình học để xóa.");
    }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void jp9AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jp9AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jp9AncestorAdded

    private void txtTenChuongTrinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenChuongTrinhActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenChuongTrinhActionPerformed

    private void txtThoiGianHoanThanhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtThoiGianHoanThanhActionPerformed

    
    }//GEN-LAST:event_txtThoiGianHoanThanhActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
    // Kiểm tra chế độ sửa (update) hay thêm mới (add)
    if (isEditMode) {
        cancelUpdate();  // Gọi cancelUpdate nếu đang sửa
    } else {
        cancelAdd();  // Gọi cancelAdd nếu đang thêm mới
    }
    }//GEN-LAST:event_btnCancelActionPerformed
    private void cancelAdd() {
    // Trở về trạng thái không chỉnh sửa
    setEditStatus(false);

    // Chọn dòng đầu tiên trong bảng
    if (tableData.getRowCount() > 0) {
        tableData.setRowSelectionInterval(0, 0);  // Chọn dòng đầu tiên
    }

    // Điền lại dữ liệu vào các TextField từ dòng đầu tiên
    String maChuongTrinh = tableData.getValueAt(0, 0).toString();
    String tenChuongTrinh = tableData.getValueAt(0, 1).toString();
    String thoiGianHoanThanh = tableData.getValueAt(0, 2).toString();

    txtMaChuongTrinh.setText(maChuongTrinh);
    txtTenChuongTrinh.setText(tenChuongTrinh);
    txtThoiGianHoanThanh.setText(thoiGianHoanThanh);
}

    private void cancelUpdate() {

        // Trở về trạng thái không chỉnh sửa
        setEditStatus(false);

        // Kiểm tra xem có dòng nào đã được chọn không
        int selectedRow = tableData.getSelectedRow();

        // Nếu có dòng đã chọn, giữ lại dòng đó. Nếu không, chọn dòng đầu tiên
        if (selectedRow == -1 && tableData.getRowCount() > 0) {
            // Nếu không có dòng nào được chọn, chọn dòng đầu tiên
            tableData.setRowSelectionInterval(0, 0);
            selectedRow = 0;  // Cập nhật selectedRow thành 0 sau khi chọn dòng đầu tiên
        }

        // Điền lại dữ liệu vào các TextField từ dòng đã chọn
        if (selectedRow >= 0 && selectedRow < tableData.getRowCount()) {
            String maChuongTrinh = tableData.getValueAt(selectedRow, 0).toString();
            String tenChuongTrinh = tableData.getValueAt(selectedRow, 1).toString();
            String thoiGianHoanThanh = tableData.getValueAt(selectedRow, 2).toString();

            txtMaChuongTrinh.setText(maChuongTrinh);
            txtTenChuongTrinh.setText(tenChuongTrinh);
            txtThoiGianHoanThanh.setText(thoiGianHoanThanh);
        }
    }
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
                                       
    // Lấy các giá trị từ các TextField
    String maChuongTrinh = txtMaChuongTrinh.getText();
    String tenChuongTrinh = txtTenChuongTrinh.getText();
    String thoiGianHoanThanhText = txtThoiGianHoanThanh.getText();

    // Kiểm tra nếu các TextField không trống
    if (tenChuongTrinh.isEmpty() || thoiGianHoanThanhText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin!");
        return;
    }

    int thoiGianHoanThanh;
    try {
        thoiGianHoanThanh = Integer.parseInt(thoiGianHoanThanhText); // Chuyển đổi thành số nguyên
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Thời gian hoàn thành phải là một số hợp lệ!");
        return;
    }

    if (isEditMode) {
        // Nếu chế độ sửa, gọi hàm cập nhật
        updateChuongTrinhHoc(maChuongTrinh,tenChuongTrinh, thoiGianHoanThanh);
    } else {
        // Nếu chế độ thêm mới, gọi hàm thêm mới
        addChuongTrinhHoc(maChuongTrinh,tenChuongTrinh, thoiGianHoanThanh);
    }


    }//GEN-LAST:event_btnSaveActionPerformed
  private void displayChuongTrinhHoc() {
        DefaultTableModel model = (DefaultTableModel) tableData.getModel();
        model.setRowCount(0);  // Xóa dữ liệu cũ trong bảng
         String sql = "SELECT * FROM ChuongTrinhHoc";

        try (Connection conn = DatabaseConnection.connect();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                String maChuongTrinhHoc = rs.getString("MaChuongTrinhHoc");
                String tenChuongTrinh = rs.getString("TenChuongTrinh");
                int thoiGianHoanThanh = rs.getInt("ThoiGianHoanThanh");

                model.addRow(new Object[]{maChuongTrinhHoc, tenChuongTrinh, thoiGianHoanThanh});
            }
            if(tableData.getRowCount()>0){
                tableData.setRowSelectionInterval(0, 0);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
      setEditStatus(false);
    }
   private void addChuongTrinhHoc(String maChuongTrinhHoc, String tenChuongTrinh, int thoiGianHoanThanh) {
    // Câu lệnh SQL để thêm mới chương trình học vào cơ sở dữ liệu
    String sql = "INSERT INTO ChuongTrinhHoc (MaChuongTrinhHoc, TenChuongTrinh, ThoiGianHoanThanh) VALUES (?, ?, ?)";

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        // Set các giá trị vào PreparedStatement
        ps.setString(1, maChuongTrinhHoc);  // Mã chương trình học được nhập vào
        ps.setString(2, tenChuongTrinh);  // Tên chương trình học
        ps.setInt(3, thoiGianHoanThanh);  // Thời gian hoàn thành

        // Thực thi câu lệnh SQL
        int rowsAffected = ps.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Chương trình học đã được thêm mới!");

            // Cập nhật lại bảng dữ liệu
            displayChuongTrinhHoc();

            // Sau khi thêm xong, trỏ đến dòng mới trong bảng
            for (int i = 0; i < tableData.getRowCount(); i++) {
                // Kiểm tra dòng nào có MaChuongTrinhHoc trùng với giá trị vừa thêm
                if (tableData.getValueAt(i, 0).equals(maChuongTrinhHoc)) {
                    tableData.setRowSelectionInterval(i, i); // Chọn lại dòng đó
                    break;
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi thêm chương trình học.");
    }
}



 private void updateChuongTrinhHoc(String maChuongTrinhHoc, String tenChuongTrinh, int thoiGianHoanThanh) {
    // Câu lệnh SQL để cập nhật thông tin chương trình học
    String sql = "UPDATE ChuongTrinhHoc SET TenChuongTrinh = ?, ThoiGianHoanThanh = ? WHERE MaChuongTrinhHoc = ?";

    try (Connection conn = DatabaseConnection.connect();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        // Set giá trị cho câu lệnh PreparedStatement
        ps.setString(1, tenChuongTrinh);
        ps.setInt(2, thoiGianHoanThanh);
        ps.setString(3, maChuongTrinhHoc);

        // Thực thi câu lệnh SQL
        int rowsAffected = ps.executeUpdate();
        
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Chương trình học đã được cập nhật!");
            displayChuongTrinhHoc(); // Cập nhật lại bảng dữ liệu

            // Tìm chỉ số dòng cần chọn lại trong bảng
            for (int i = 0; i < tableData.getRowCount(); i++) {
                // Kiểm tra dòng nào có mã chương trình học trùng với mã vừa cập nhật
                if (tableData.getValueAt(i, 0).equals(maChuongTrinhHoc)) {
                    tableData.setRowSelectionInterval(i, i); // Chọn lại dòng đó
                    break;
                }
            }
        } else {
            // Nếu không có dòng nào bị ảnh hưởng, có thể là mã chương trình không tồn tại
            JOptionPane.showMessageDialog(null, "Không có chương trình học nào cần cập nhật. Vui lòng kiểm tra lại mã chương trình.");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi cập nhật chương trình học: " + e.getMessage());
    }
}


   
    
  public void setEditStatus(boolean editable) {
         isEditMode = editable;
        
        txtMaChuongTrinh.setEnabled(editable);
        txtTenChuongTrinh.setEnabled(editable);
        txtThoiGianHoanThanh.setEnabled(editable);
       
        btnSave.setEnabled(editable);
        btnCancel.setEnabled(editable);
        
        btnAdd.setEnabled(!editable);
        btnUpdate.setEnabled(!editable);
        btnDelete.setEnabled(!editable);
        tableData.setEnabled(!editable);
        
        java.awt.Color enableColor = new java.awt.Color(0, 51, 153);
        java.awt.Color disableColor = new java.awt.Color(128, 128, 128);

        if(editable) {
            btnAdd.setBackground(disableColor);
            btnUpdate.setBackground(disableColor);
            btnDelete.setBackground(disableColor);
            
            btnSave.setBackground(enableColor);
            btnCancel.setBackground(enableColor);
        }
        else {
            btnAdd.setBackground(enableColor);
            btnUpdate.setBackground(enableColor);
            btnDelete.setBackground(enableColor);
            
            btnSave.setBackground(disableColor);
            btnCancel.setBackground(disableColor);
        }
    }

  
    



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel jp9;
    private javax.swing.JTable tableData;
    private javax.swing.JTextField txtMaChuongTrinh;
    private javax.swing.JTextField txtTenChuongTrinh;
    private javax.swing.JTextField txtThoiGianHoanThanh;
    // End of variables declaration//GEN-END:variables
}
